/* 
  Пусть k будет предложением, что обитатель - рыцарь.
  Тогда утверждение обитателя состоит в том, что k эквивалентно p.
  Если он - рыцарь, тогда его утверждение истинно (k эквивалентно p), и следовательно, истинно и p.
  Если он - лжец, тогда его утверждение должно быть ложным; k не эквивалентно p, но т.к k ложно,
  p должно быть истинным.
*/
predicates
  p
  nondeterm human(symbol,symbol)
  nondeterm rule(symbol)
  nondeterm check(symbol, symbol)
  nondeterm find(symbol, symbol)
 
clauses
  p.
  human("Обитатель", "Рыцарь").
  human("Обитатель", "Лжец").
  
  % k => p
  % (!k \/ p)
  rule(K):- K = "Лжец"; p.
 
  check("Рыцарь", "Истина"):- p, rule("Рыцарь").
  check("Рыцарь", "Ложь"):- not(p), rule("Рыцарь"). /* не сработает */
  check("Лжец", "Истина"):- p, not(rule("Лжец")). /* не сработает */
  check("Лжец", "Ложь"):- not(p), not(rule("Лжец")). /* не сработает */
 
  find(K, P):- human("Обитатель", K), check(K, P).
 
goal
  find(K, P).
